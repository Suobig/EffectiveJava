package net.suobig.effectivejava.ch4_ClassesAndInterfaces;

import java.text.DecimalFormat;
import java.util.Arrays;


/*  Инкапсуляция - ограничение доступа к деталям реализации объектов - является
 важным элементом программирования. 
 
    Одно из основных достоинств инкапсуляции состоит в возможности отделить
API от реализации, тем самым, оставляя первое неизменным, свободно менять
второе, не влияя остальную часть системы. Это также позволяет вести параллельную
разработку модулей, ускоряя тем самым процесс разработки. Кроме того, 
изолированные друг от друга модули можно также изолированно тестировать на баги.
Не смотря на то, что сама по себе инкапсуляция скорее ухудшает 
производительность, она ускоряет процесс повышения производительности: можно 
выявлять и оптимизировать систему отдельными модулями.

    Кроме того, при написании изолированных модулей, они могут использоваться
многократно в разных сисетмах без малейших изменений.

    И, наконец, изолированные модули могут быть полезны при создании крупных 
систем - даже если система в целом будет признана неудачной, отдельные ее части
могут получить самостоятельную жизнь.

    Java обладает множеством способов сокрытия информации. Основное правило: 
делайте информацию настолько скрытой, насколько это возможно. 

    Для классов и интерфейсов верхнего уровня (не вложенных) есть всего два 
уровня доступа: публичный и пакетный. Если есть возможность оставить у класса
пакетный уровень доступа - это нужно сделать. В таком случае это будет часть
реализации, иначе - часть API. Отсюда очевидная выгода - пользователи
рассчитывают на то, что API останется неизменным, при этом о деталях реализации
они ничего не знают и вы в праве менять их как вам заблагорасcудится.

    Если класс с пакетным доступом используется только одним другим классом - 
возможно имеет смысл сделать его вложенным с приватным доступом. Это снизит его
видимость для остальных классов из данного пакета.

    Уровни доступа для элементов класса:
    * private - доступен только в том классе верхнего уровня, в котором объявлен
    * package-private - доступен только классам из этого же пакета. Уровень по-
умолчанию
    * protected - доступен для всех наследников и любого класса из того же 
пакета
    * public - доступен всем
    
    После того, как вы разработали API своего класса, минимизируйте доступ извне 
к остальным компонентам. Только в крайнем случае допустимо поменять компонентам
доступ на пакетный. Если эти крайних случаев слишком много - стоит задуматься об
архитектуре своей программы. Заметим, что эти поля могут просочиться в API, если
класс реализует интерфейс Serializable    */
//TODO: Дополнить после U74,75

/*  Protected элементы - это уже часть API и их нужно постоянно поддерживать. 
При этом Protected элементы предоставляют публичный доступ к деталям релазиации
поэтому пользоваться ими надо как можно реже*/
//TODO: Дополнить после U17

/*  Существует несколько правил, которые ограничивают ваши возможности по 
регулированию уровня доступа: 
    1) Уровень доступа переопределенного в наследнике метода не может быть ниже,
чем в родителе. Это требуется для того, чтобы наследник мог заменять родителя.
Нарушение этого правила приведет к ошибке компиляции
    2) Если класс реализует интерфейс, все предусмотренные интерфейсом методы
должны быть публичными.
    
    Для удобства тестирования можно повысить видимость некоторых элементов,
но недопустимо выводить в API детали реализации т.е. private -> package-private 
можно, а package-private -> protected уже нельзя. 

    Поля класса никогда не должны быть публичными.
    Если поле публично и изменяемо, либо содрежит ссылку на изменяемый объект,
делая его публичным вы теряете контроль над тем, какие данные помещаются в это
поле. Также вы не можете сделать такой класс потокобезопасным. Если вы сделали
поле публичным, вы уже не можете убрать его из реализации или изменить тип 
данных. 

    Статические неизменяемые поля могут быть публичными. При этом они обязаны 
содержать примитив или ссылку на неизменяемый объект.  */